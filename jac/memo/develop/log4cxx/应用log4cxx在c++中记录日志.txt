1.     介绍
Log4cxx是开放源代码项目Apache Logging Service的子项目之一，是Java社区著名的log4j的c++移植版，用于为C++程序提供日志功能，以便开发者对目标程序进行调试和审计。
有关log4cxx的更多信息可以从Apache Loggin Service的网站http://logging.apache.org获得。当前的稳定版本为0.9.7，本文内容及示例代码都是基于此版本。
2.1     获取软件包
请从官方网站获得合适的版本。也可以从下面这个链接中直接获取（直接的链接地址可能不会永远有效）：
http://logging.apache.org/
下载完成后解压缩到合适的目录中
2.2     编译
原始发行包中不含编译后的代码，这个工作需要我们自己来做。打开你的IDE，打开log4cxx.dsw，会加载以下目录中的工程：
l        Msvc\static：该工程产生log4cxx的静态链接库（lib4cxx.lib和lib4cxxs.lib）；
l        Msvc\dll：该工程产生log4cxx的动态链接库（lib4cxx.dll）。
通常情况下，工程都可以顺利编译通过。查看输出目录，把这些生成的库文件找出来，以便在下一步骤中使用。
2.3     项目环境设置
请先在IDE中打开一个需要加入日志功能的工程，或者出于实验目的，新建一个工程，以便对其进行设置。
首先需要设置log4cxx的include文件。这些文件位于log4cxx软件包的include\log4cxx目录内。请查看你的VC++ IDE中“工具->选项->项目->VC++目录->包含文件”所列出的内容，以便确定你以何种方式加入这些include文件：
l        将include\log4cxx直接拷贝到已定义的包含文件目录中。如果将log4cxx看作是一项系统服务的话，这样做是胡合乎情理的，因为你可以采用标准库的方式使用它，例如：#include <log4cxx/logger.h>
l        增加一个包含路径，以指向位于IDE外部的某一文件目录。可以简单的指向在2.1中解压缩后形成的log4cxx软件包目录。
下一步需要对2.2节产生的log4cxx库进行设置。这取决于你使用该库的方式：静态链接或者动态链接。
l        静态链接情况下需要做如下工作：为预编译器定义LOG4CXX_STATIC宏，设置位置为“Project->Setting->C/C++->Categroy->Preprossor->Proprossor Definitions”；为链接器指定依赖的库lib4cxxs.lib和Ws2_32.lib
l        动态链接情况下只需要为链接器指定依赖的库lib4cxxs.lib即可，设置方式同上。
3.     示例代码
本节展示了一个最简单的log4cxx示例，以便你可以快速的了解它。
该示例在功能上创建了一个日志服务，该日志可通过配置文件进行必要控制，并可以同时向文件和控制台输出信息。
在实现上，我们采用了一个简单的控制台程序，并使用动态链接库的方式使用log4cxx。
要实现这个目标，请按如下步骤进行：
1）创建一个名为logdemo的空白win32控制台工程，并按照2.3节所述内容对其进行设置。注意，这里我们使用动态连接口的方式。
2）在logdemo.cpp中加入实现日志功能的代码。完成后的代码清单如下：
#include "stdafx.h"
#include <log4cxx/logger.h>
#include <log4cxx/propertyconfigurator.h>
 
using namespace log4cxx;
 
int _tmain(int argc, _TCHAR* argv[])
{
    //加载log4cxx的配置文件，这里使用了属性文件
    PropertyConfigurator::configure("log4cxx.properties");
    
    //获得一个Logger，这里使用了RootLogger
    LoggerPtr rootLogger = Logger::getRootLogger();
    
    //发出INFO级别的输出请求
    LOG4CXX_INFO(rootLogger, _T("它的确工作了"));
//rootLogger->info(_T("它的确工作了")); //与上面那句话功能相当
 
return 0;
}
，因为我们在下一步中需要使用软件包，包括编译和复制必要的文件。
以Debug方式编译工程，调试程序直到成功为止。
3）新建一个文本文件，命名为log4cxx.properties，并键入如下内容：
# 设置root logger为DEBUG级别，使用了ca和fa两个Appender 
log4j.rootLogger=DEBUG, ca, fa
 
#对Appender fa进行设置：
# 这是一个文件类型的Appender，
# 其输出文件（File）为./output.log，
# 输出方式（Append）为覆盖方式，
# 输出格式（layout）为PatternLayout
log4j.appender.fa=org.apache.log4j.FileAppender 
log4j.appender.fa.File=./output.log
log4j.appender.fa.Append=true
log4j.appender.fa.layout=org.apache.log4j.PatternLayout 
log4j.appender.fa.layout.ConversionPattern=%d [%t] %-5p %.16c - %m%n
 
#对Appender ca进行设置：
# 这是一个控制台类型的Appender
#  输出格式（layout）为PatternLayout
log4j.appender.ca=org.apache.log4j.ConsoleAppender 
log4j.appender.ca.layout=org.apache.log4j.PatternLayout 
log4j.appender.ca.layout.ConversionPattern=%d [%t] %-5p %.16c - %m%n
4）复制log4cxx.dll到输出目录。在动态链接方式下，应用程序需要能够找到这个库文件。
5）运行生成的logdemo.exe文件，查看一下运行结果，看看我们工作有没有取得成效。如果一切顺利，无论是在控制台还是在输出文件中，都应该能看到类似下面那样的输出内容：
2006-06-02 16:09:50,609 [2528] INFO root - 它的确工作了
 
4. 体系结构
4.1 核心类
Log4cxx有三个关键组件，它们是loggers, appenders和layouts。
Logger是log4cxx的核心类，只要执行日志操作；looger有层次结构，最顶层为RootLogger；logger是有级别的。每个logger可以附加多个Appender。Appender代表了日志输出的目标，如输出到文件、控制台等等。对于每一种appender，都可以通过layout进行格式设置。
这三类组件用示意图表示如下（不代表类关系）：
（TODO：在此对三种组件分别进行说明）
4.2 配置类
此外在使用中还会用到的类有BasicConfigurator、PropertyConfigurator和DOMConfigurator等，用于对log4cxx进行配置。其中：
BasicConfigurator提供了一种简单配置，包括使用ConsoleAppder作为root appender和PatternLayout作为缺省布局。
PropertyConfigurator使用properties文件作为配置方式。
DOMConfigurator则使用properties文件作为配置方式。
（TODO：在此对配置内容进行说明）
5.     实践指导
在项目中是否使用日志，以及如何使用日志，对开发者来说都是一个需要做出的技术选择，这通常会牵扯到系统的性能，使用日志的目的等问题。我们使用日志的方式，有些是这个行业积累了多年的经验，有些则纯粹关乎个人的喜好。
1）何时使用日志
通常情况下，日志的作用在于调试和审计，如果你的项目对此有特殊需求，即可考虑使用日志。
对于调试，通常用于IDE调试器无法达到的地方。一些常见的场景包括：
分布式组件的调试。在服务器端的组件，需要通过客户端的调用来验证其工作是否正确，此时利用日志的输出作为辅助工具对错误进行诊断。
链接库调试。在无法跟踪进外部库中的情况下，这种方法非常有效。
生产环境下的调试。生产环境通常是指产品在客户处处于正式运行的状态，在出现问题时，开发者常常不在现场，借助日志的输出进行错误判断就是一个非常有效的手段。
对于审计应用，则需要视特定的情况而定，程序级的记录能力，无疑可以作为业务级审计手段的有效补充。
无论是在哪种场景下，log4cxx都是可以胜任工作的，这取决于它的灵活的配置能力及多种类型的输出方式。
2）性能问题
关闭日志，通过配置文件设置日志的关闭和打开
使用宏代替logger的输出命令
选择性输出日志。建立logger的层次结构，根据级别选择性输出
输出目标。尽可能减少输出目标
选择合适的输出格式。使用SimpleLayout将达到与std::cout相当的速度。
3）其它
使用类的全限定名对logger命名
6.     结论
Log4cxx具有的一些显著特性使得C++者可以将其放入自己的工具箱中，这些特性包括灵活的配置能力，多种输出手段，丰富的格式控制，出色的性能。如果在你的开发中需要借助于日志进行调试和审计，你也许需要log4cxx。最后，重要的一点是，如你所见，log4cxx的使用是如此的简单。
如果在SDI或者MDI程序中，可以如下步骤使用log4cxxx:
1.在CXXXApp类的头文件里加入以下几行：
#include <log4cxx/logger.h>
#include <log4cxx/propertyconfigurator.h>
using namespace log4cxx;
2.在CXXXApp类中增加public的成员变量：
LoggerPtr rootLogger;
3.在CXXXApp::InitInstance()的最底下增加如下代码：
    PropertyConfigurator::configure("log4cxx.properties");
    rootLogger = Logger::getRootLogger();
4.以后就可以这样输入日志记录了：
    ((CXXXApp *)AfxGetApp())->rootLogger->info("On OA Manage!");