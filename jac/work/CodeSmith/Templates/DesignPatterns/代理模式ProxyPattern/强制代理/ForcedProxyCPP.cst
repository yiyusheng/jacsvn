<%@ CodeTemplate Language="C#" TargetLanguage="C++" ResponseEncoding= "UTF-8" Description="普通代理的C++实现" %>
<%@ Property Name="AbstractSubjectName" Type="String" Default="AbstractSubject" Category="Context" Description="类名" %>
<%@ Property Name="SubjectName" Type="String" Default="Subject" Category="Context" Description="类名" %>
<%@ Property Name="IProxyName" Type="String" Default="IProxy" Category="Context" Description="类名" %>
<%@ Property Name="ProxyName" Type="String" Default="Proxy" Category="Context" Description="类名" %>
class <%= AbstractSubjectName %>
{
public:
    virtual void doSomething() = 0;
    virtual <%= AbstractSubjectName %>* getProxy() = 0;
};

class <%= SubjectName %> : public <%= AbstractSubjectName %>
{
private:
    <%= AbstractSubjectName %>* _p<%= ProxyName %>;
    int property;
public:
    <%= SubjectName %>(int _property)
    {
        this->property = _property;
    }
    virtual <%= AbstractSubjectName %>* getProxy()
    {
        this->_p<%= ProxyName %> = new <%= ProxyName %>(this);
        return this->_p<%= ProxyName %>;
    }
    virtual void doSomething()
    {
        if(this->_p<%= ProxyName %> != some_condition)
        {
        }
        else
        {
        }
    }
};

class <%= IProxyName %>
{
public:
    virtual void charge() = 0;
};

class <%= ProxyName %> : public <%= AbstractSubjectName %>, public <%= IProxyName %>
{
private:
    <%= AbstractSubjectName %>* p<%= AbstractSubjectName %>;
public:
    Proxy(<%= AbstractSubjectName %>* _p<%= AbstractSubjectName %>)
    {
        this->p<%= AbstractSubjectName %> = _p<%= AbstractSubjectName %>;
    }

    virtual void charge()
    {

    }

    virtual void doSomething()
    {
        this->before();
        this->p<%= AbstractSubjectName %>->doSomething();
        this->after();
        this->charge();
    }
    
    virtual <%= AbstractSubjectName %>* getProxy()
    {
        return this;
    }

private:
    void before()
    {

    }

    void after()
    {

    }
};

void main()
{
    <%= AbstractSubjectName %>* p<%= SubjectName %> = new <%= SubjectName %>(some_property);
    <%= AbstractSubjectName %>* p<%= ProxyName %> = p<%= SubjectName %>->getProxy();
    p<%= ProxyName %>->doSomething();
}