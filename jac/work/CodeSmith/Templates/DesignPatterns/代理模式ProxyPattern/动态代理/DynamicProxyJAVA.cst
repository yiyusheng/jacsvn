<%@ CodeTemplate Language="C#" TargetLanguage="Java" ResponseEncoding= "UTF-8" Description="动态代理的Java实现" %>
<%@ Property Name="ISubjectName" Type="String" Default="ISubject" Category="Context" Description="类名" %>
<%@ Property Name="SubjectName" Type="String" Default="Subject" Category="Context" Description="类名" %>
<%@ Property Name="IProxyName" Type="String" Default="IProxy" Category="Context" Description="类名" %>
<%@ Property Name="SubjectInvocationHandlerName" Type="String" Default="SubjectInvocationHandler" Category="Context" Description="类名" %>
<%@ Property Name="SubjectDynamicProxyName" Type="String" Default="SubjectDynamicProxy" Category="Context" Description="类名" %>
public interface <%= ISubjectName %> {
    public void doSomething();
}

public class <%= SubjectName %> implements <%= ISubjectName %> {
    public void doSomething() {

    }
}

public interface <%= IProxyName %> {
    public void charge();
}

public class <%= SubjectInvocationHandlerName %> implements <%= IProxyName %>, InvocationHandler {
    private Object target = null;//被代理的实例
    
    public <%= SubjectInvocationHandlerName %>(Object _obj) {
        this.target = _obj;
    }
    
    public void charge() {
    
    }
    
    public Object invoke(Object proxy, Method method, object[] args) throws Throwable {
        this.before();
        Object result = method.invoke(this.obj, args);
        this.after();
        this.charge();
        return result;
    }
    
    private void before() {

    }

    private void after() {

    }
}

public class <%= SubjectDynamicProxyName %><T> {
    public static <T> T newProxyInstance(<%= ISubjectName %> p<%= SubjectName %>) {
        //获得ClassLoader
        ClassLoader loader = p<%= SubjectName %>.getClass().getClassLoader();
        //获得接口数组
        Class<?>[] classes = p<%= SubjectName %>.getClass().getInterfaces();
        //获得handler
        InvocationHandler handler = new <%= SubjectInvocationHandlerName %>(p<%= SubjectName %>);
        
        //这里可以放前置通知
        
        return (T)Proxy.newProxyInstance(loader, classes, handler);
    }
}

public class Client {
    public static void main(String[] args) {
        <%= ISubjectName %> p<%= SubjectName %> = new <%= SubjectName %>();
        <%= ISubjectName %> proxy = <%= SubjectDynamicProxyName %>.newProxyInstance(p<%= SubjectName %>);
        proxy.doSomething();
    }
}