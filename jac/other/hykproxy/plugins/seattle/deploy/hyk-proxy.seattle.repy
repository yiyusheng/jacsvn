
def decrypt(data):
#    return data
    if data is None:
        return None
    length = len(data)
    str_list = []
    for i in xrange(length):
        b = data[i]
        bv = ord(b) & 0xff
        bv = bv + 1
        if bv >= 256:
            bv = bv - 256
        str_list.append(chr(bv))
    return "".join(str_list)

def encrypt(data):
#    return data
    if data is None:
        return None
    length = len(data)
    str_list = []
    for i in xrange(length):
        b = data[i]
        bv = ord(b) & 0xff
        bv = bv - 1
        if bv < 0:
            bv = bv + 256
        str_list.append(chr(bv))
    return "".join(str_list)

class Semaphore:
    def __init__(self, permits):
        self.permits = permits
        self.locks = []
        for i in range(permits):
            self.locks.append(getlock())
        self.block = getlock()
        
    def acquire(self):
        self.block.acquire(0)
        for lock in self.locks:
            if lock.acquire(0):
                return True
        self.block.acquire()
        return self.acquire()
    
    def release(self):
        for lock in self.locks:
            try:
                lock.release()
                break
            except:
                pass
        try:
            self.block.release()
        except:
            pass

def proxyHandler(ip, port, sockobj, thiscommhandle, listencommhandle):
    #ConnectionHandler(sockobj, thiscommhandle)
     mycontext['lock'].acquire()
     try:
         connectionHandler = ConnectionHandler(sockobj, thiscommhandle)
         while connectionHandler.running:
             sleep(0.05)
     except:
        pass
     mycontext['lock'].release()
     stopcomm(thiscommhandle)
        #raise
  #stopcomm(thiscommhandle)   

def checkSockets(socks):
    state = True
    try:
        for sock in socks:
            print sock.willblock()
            state = state and sock.willblock()[1]
    except:
        return
    print 'check state', state
    if state:
        print 'close sockets'
        for sock in socks:
            sock.close()
    else:
        sleep(1)
        checkSockets(socks)     
    

def forward(source, target, connectionHandler):
    try:
        while True:
            data = source.recv(4096)
            if source is connectionHandler.client:
                data = decrypt(data)
            else:
                data = encrypt(data)
            #print 'forward', data
            target.send(data)
    except:
        connectionHandler.running = False
        source.close()
        target.close()
        #stopcomm(connectionHandler.thiscommhandle)

class ConnectionHandler:
    def __init__(self, connection, thiscommhandle):
        self.client = connection
        self.thiscommhandle = thiscommhandle
        self.client_buffer = ''
        self.running = True
        self.method, self.path, self.protocol = self.get_base_header()
        if self.method=='CONNECT':
            self.method_CONNECT()
        elif self.method in ('OPTIONS', 'GET', 'HEAD', 'POST', 'PUT',
                             'DELETE', 'TRACE'):
            self.method_others()
        socks = [self.target, self.client]
        #settimer(0, checkSockets, (socks,))
        #sleep(100)
        #self.client.close()
        #self.target.close()

    def get_base_header(self):
        while 1:
            self.client_buffer += decrypt(self.client.recv(4096))
            end = self.client_buffer.find('\n')
            if end!=-1:
                break
        #print '%s'%self.client_buffer[:end]#debug
        data = (self.client_buffer[:end+1]).split()
        self.client_buffer = self.client_buffer[end+1:]
        #print data
        return data

    def method_CONNECT(self):
        self._connect_target(self.path)
        self.client.send(encrypt('HTTP/1.1 200 Connection established\n'+
                         'Proxy-agent: hyk-proxy\n\n'))
        self.client_buffer = ''
        self._read_write()        

    def method_others(self):
        if self.path.startswith("http://"):
            self.path = self.path[7:]
            i = self.path.find('/')
            host = self.path[:i]        
            path = self.path[i:]
        else:
            path = self.path
            start = self.client_buffer.lower().find('host:')  
            if index > 0:
                end = self.client_buffer.find('\n', start)
                if end > 0:
                    host = self.client_buffer[start+5:end].strip()
            
        self._connect_target(host)
        self.target.send('%s %s %s\n'%(self.method, path, self.protocol)+
                         self.client_buffer)
        #print self.client_buffer
        self.client_buffer = ''
        self._read_write()

    def _connect_target(self, host):
        i = host.find(':')
        if i!=-1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            port = 80
        #print host,port
        self.target=openconn(host, port)

    def _read_write(self):
    	self.fin = settimer(0, forward, (self.client, self.target, self))
    	self.fout = settimer(0, forward, (self.target, self.client, self))      

if callfunc == 'initialize':
    if len(callargs) > 1:
        raise Exception("Too many call arguments")

  # Running remotely:
  # whenever this vessel gets a connection on its IPaddress:GENIport it'll call hello
    elif len(callargs) == 1:
        port = int(callargs[0])
        ip = getmyip()

  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call hello
    else:
        port = 63160
        ip = '127.0.0.1'
    mycontext['lock'] = Semaphore(2)
    listencommhandle = waitforconn(ip,port,proxyHandler)
